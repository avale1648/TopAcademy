//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdoNetExaminationProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PosterNewEntities : DbContext
    {
        public PosterNewEntities()
            : base("name=PosterNewEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<View1> View1 { get; set; }
    
        public virtual int DeleteCustomer(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomer", customerIdParameter);
        }
    
        public virtual int DeleteEvent(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEvent", eventIdParameter);
        }
    
        public virtual int InsertCustomer(string name, string surname, Nullable<System.DateTime> birthdate, Nullable<int> ticketId, ObjectParameter customerId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("ticketId", ticketId) :
                new ObjectParameter("ticketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomer", nameParameter, surnameParameter, birthdateParameter, ticketIdParameter, customerId);
        }
    
        public virtual int InsertEvent(string name, Nullable<System.DateTime> dateTime, string country, string city, string adress, Nullable<int> eventTypeId, string description, Nullable<int> ageLimitId, Nullable<int> tickets, Nullable<int> soldTickets, ObjectParameter eventId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("dateTime", dateTime) :
                new ObjectParameter("dateTime", typeof(System.DateTime));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("adress", adress) :
                new ObjectParameter("adress", typeof(string));
    
            var eventTypeIdParameter = eventTypeId.HasValue ?
                new ObjectParameter("eventTypeId", eventTypeId) :
                new ObjectParameter("eventTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var ageLimitIdParameter = ageLimitId.HasValue ?
                new ObjectParameter("ageLimitId", ageLimitId) :
                new ObjectParameter("ageLimitId", typeof(int));
    
            var ticketsParameter = tickets.HasValue ?
                new ObjectParameter("tickets", tickets) :
                new ObjectParameter("tickets", typeof(int));
    
            var soldTicketsParameter = soldTickets.HasValue ?
                new ObjectParameter("soldTickets", soldTickets) :
                new ObjectParameter("soldTickets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEvent", nameParameter, dateTimeParameter, countryParameter, cityParameter, adressParameter, eventTypeIdParameter, descriptionParameter, ageLimitIdParameter, ticketsParameter, soldTicketsParameter, eventId);
        }
    
        public virtual int InsertIntoArchive(string name, Nullable<System.DateTime> dateTime, string country, string city, string adress, Nullable<int> eventTypeId, string description, Nullable<int> ageLimitId, Nullable<int> tickets, Nullable<int> soldTickets, ObjectParameter inArchiveId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("dateTime", dateTime) :
                new ObjectParameter("dateTime", typeof(System.DateTime));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("adress", adress) :
                new ObjectParameter("adress", typeof(string));
    
            var eventTypeIdParameter = eventTypeId.HasValue ?
                new ObjectParameter("eventTypeId", eventTypeId) :
                new ObjectParameter("eventTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var ageLimitIdParameter = ageLimitId.HasValue ?
                new ObjectParameter("ageLimitId", ageLimitId) :
                new ObjectParameter("ageLimitId", typeof(int));
    
            var ticketsParameter = tickets.HasValue ?
                new ObjectParameter("tickets", tickets) :
                new ObjectParameter("tickets", typeof(int));
    
            var soldTicketsParameter = soldTickets.HasValue ?
                new ObjectParameter("soldTickets", soldTickets) :
                new ObjectParameter("soldTickets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoArchive", nameParameter, dateTimeParameter, countryParameter, cityParameter, adressParameter, eventTypeIdParameter, descriptionParameter, ageLimitIdParameter, ticketsParameter, soldTicketsParameter, inArchiveId);
        }
    
        public virtual int InsertTicket(Nullable<int> eventId, Nullable<decimal> price, ObjectParameter ticketId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTicket", eventIdParameter, priceParameter, ticketId);
        }
    
        public virtual ObjectResult<string> Procedure1(Nullable<System.DateTime> datetime)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Procedure1", datetimeParameter);
        }
    
        public virtual ObjectResult<Procedure10_Result> Procedure10(Nullable<System.DateTime> datetime)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procedure10_Result>("Procedure10", datetimeParameter);
        }
    
        public virtual ObjectResult<string> Procedure11(Nullable<System.DateTime> datetime)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Procedure11", datetimeParameter);
        }
    
        public virtual ObjectResult<string> Procedure2(Nullable<int> eventTypeId)
        {
            var eventTypeIdParameter = eventTypeId.HasValue ?
                new ObjectParameter("EventTypeId", eventTypeId) :
                new ObjectParameter("EventTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Procedure2", eventTypeIdParameter);
        }
    
        public virtual ObjectResult<Procedure3_Result> Procedure3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procedure3_Result>("Procedure3");
        }
    
        public virtual ObjectResult<Procedure4_Result> Procedure4()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procedure4_Result>("Procedure4");
        }
    
        public virtual ObjectResult<string> Procedure5()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Procedure5");
        }
    
        public virtual ObjectResult<Procedure6_Result> Procedure6(string city)
        {
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procedure6_Result>("Procedure6", cityParameter);
        }
    
        public virtual ObjectResult<string> Procedure8()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Procedure8");
        }
    
        public virtual ObjectResult<Procedure9_Result> Procedure9(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procedure9_Result>("Procedure9", startParameter, endParameter);
        }
    
        public virtual int SaleTicket(Nullable<int> eventId, Nullable<int> customerId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaleTicket", eventIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<SelectAgeLimit_Result> SelectAgeLimit(Nullable<int> ageLimitId)
        {
            var ageLimitIdParameter = ageLimitId.HasValue ?
                new ObjectParameter("ageLimitId", ageLimitId) :
                new ObjectParameter("ageLimitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAgeLimit_Result>("SelectAgeLimit", ageLimitIdParameter);
        }
    
        public virtual ObjectResult<SelectCustomer_Result> SelectCustomer(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCustomer_Result>("SelectCustomer", customerIdParameter);
        }
    
        public virtual ObjectResult<SelectEvent_Result> SelectEvent(Nullable<int> eventId)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEvent_Result>("SelectEvent", eventIdParameter);
        }
    
        public virtual ObjectResult<SelectEventType_Result> SelectEventType(Nullable<int> eventTypeId)
        {
            var eventTypeIdParameter = eventTypeId.HasValue ?
                new ObjectParameter("eventTypeId", eventTypeId) :
                new ObjectParameter("eventTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEventType_Result>("SelectEventType", eventTypeIdParameter);
        }
    
        public virtual ObjectResult<SelectFromArchive_Result> SelectFromArchive(Nullable<int> fromArchiveId)
        {
            var fromArchiveIdParameter = fromArchiveId.HasValue ?
                new ObjectParameter("fromArchiveId", fromArchiveId) :
                new ObjectParameter("fromArchiveId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectFromArchive_Result>("SelectFromArchive", fromArchiveIdParameter);
        }
    
        public virtual ObjectResult<SelectTicket_Result> SelectTicket(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("ticketId", ticketId) :
                new ObjectParameter("ticketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTicket_Result>("SelectTicket", ticketIdParameter);
        }
    
        public virtual int UpdateCustomer(Nullable<int> customerId, string name, string surname, Nullable<System.DateTime> birthdate, Nullable<int> ticketId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("birthdate", birthdate) :
                new ObjectParameter("birthdate", typeof(System.DateTime));
    
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("ticketId", ticketId) :
                new ObjectParameter("ticketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomer", customerIdParameter, nameParameter, surnameParameter, birthdateParameter, ticketIdParameter);
        }
    
        public virtual int UpdateEvent(Nullable<int> eventId, string name, Nullable<System.DateTime> dateTime, string country, string city, string adress, Nullable<int> eventTypeId, string description, Nullable<int> ageLimitId, Nullable<int> tickets, Nullable<int> soldTickets)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("dateTime", dateTime) :
                new ObjectParameter("dateTime", typeof(System.DateTime));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var adressParameter = adress != null ?
                new ObjectParameter("adress", adress) :
                new ObjectParameter("adress", typeof(string));
    
            var eventTypeIdParameter = eventTypeId.HasValue ?
                new ObjectParameter("eventTypeId", eventTypeId) :
                new ObjectParameter("eventTypeId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var ageLimitIdParameter = ageLimitId.HasValue ?
                new ObjectParameter("ageLimitId", ageLimitId) :
                new ObjectParameter("ageLimitId", typeof(int));
    
            var ticketsParameter = tickets.HasValue ?
                new ObjectParameter("tickets", tickets) :
                new ObjectParameter("tickets", typeof(int));
    
            var soldTicketsParameter = soldTickets.HasValue ?
                new ObjectParameter("soldTickets", soldTickets) :
                new ObjectParameter("soldTickets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEvent", eventIdParameter, nameParameter, dateTimeParameter, countryParameter, cityParameter, adressParameter, eventTypeIdParameter, descriptionParameter, ageLimitIdParameter, ticketsParameter, soldTicketsParameter);
        }
    
        public virtual int UpdateTicket(Nullable<int> ticketId, Nullable<int> eventId, Nullable<decimal> price)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("ticketId", ticketId) :
                new ObjectParameter("ticketId", typeof(int));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("eventId", eventId) :
                new ObjectParameter("eventId", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTicket", ticketIdParameter, eventIdParameter, priceParameter);
        }
    
        public virtual int DeleteTicket(Nullable<int> ticketId)
        {
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("ticketId", ticketId) :
                new ObjectParameter("ticketId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTicket", ticketIdParameter);
        }
    }
}
